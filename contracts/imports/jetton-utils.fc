#include "stdlib.fc";

cell pack_jetton_wallet_data(
  int balance,
  slice owner_address,
  slice jetton_master_address,
  cell jetton_wallet_code
) inline {
  return  begin_cell()
            .store_coins(balance)
            .store_slice(owner_address)
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
            .end_cell();
}

cell calculate_jetton_wallet_state_init(
  slice owner_address,
  slice jetton_master_address,
  cell jetton_wallet_code
) inline {
  return begin_cell()
          .store_uint(0, 2)
          .store_dict(jetton_wallet_code)
          .store_dict(
    pack_jetton_wallet_data(
      0,
      owner_address,
      jetton_master_address,
      jetton_wallet_code
    )
  )
          .store_uint(0, 1)
          .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
  return begin_cell()
        .store_uint(4, 3)
        .store_int(workchain(), 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

slice calculate_user_jetton_wallet_address(
  slice owner_address,
  slice jetton_master_address,
  cell jetton_wallet_code
) inline {
  return calculate_jetton_wallet_address(
    calculate_jetton_wallet_state_init(
      owner_address,
      jetton_master_address,
      jetton_wallet_code
    )
  );
}

(cell, cell, cell, cell, int, int, int) unpack_wrapped_token_data(cell data) inline {
    slice slice_data = data.begin_parse();

    (
        cell name,
        cell description,
        cell image,
        cell symbol,
        int decimals,
        int group_id,
        int group_owner
    ) = (
        slice_data~load_ref(),
        slice_data~load_ref(),
        slice_data~load_ref(),
        slice_data~load_ref(),
        slice_data~load_uint(8),
        slice_data~load_uint(64),
        slice_data~load_uint(64)
    );
    slice_data.end_parse();

    return (
        name,
        description,
        image,
        symbol,
        decimal,
        group_id,
        group_owner
    );
}

;; https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#data-serialization
cell pack_metadata_value(slice a) inline {
    return begin_cell().store_uint(0, 8).store_slice(a).end_cell();
}

slice encode_number_to_text(int decimals, int radix) {
    builder str = begin_cell();
    int ctr  = 0;
    tuple chars =  empty_tuple();

    do {
        (decimals, int rem) = decimals /% radix;

        chars~tpush( rem >= 10 ? 87 + rem : 48 + rem);
        ctr += 1;
    } until (decimals == 0);

    repeat( ctr ) {
        str     = str.store_uint(chars.at(ctr - 1), 8);
        ctr    -= 1;
    }

    return str.end_cell().begin_parse();
}